import { LanguageSupport, StreamLanguage } from "@codemirror/language";

/**
 * We load the language support packages on demand to make sure the bundle size doesn't blow up.
 *
 * Using the modern language packages is preferable if one is available, otherwise we can fall back to the legacy
 * packages using a compatibility layer.
 */

const MODERN_MODES = {
  cpp: () => import("@codemirror/lang-cpp").then((m) => m.cpp()),
  css: () => import("@codemirror/lang-css").then((m) => m.css()),
  html: () => import("@codemirror/lang-html").then((m) => m.html()),
  java: () => import("@codemirror/lang-java").then((m) => m.java()),
  javascript: () => import("@codemirror/lang-javascript").then((m) => m.javascript({ typescript: false, jsx: false })),
  jsx: () => import("@codemirror/lang-javascript").then((m) => m.javascript({ typescript: false, jsx: true })),
  typescript: () => import("@codemirror/lang-javascript").then((m) => m.javascript({ typescript: true, jsx: false })),
  tsx: () => import("@codemirror/lang-javascript").then((m) => m.javascript({ typescript: true, jsx: true })),
  json: () => import("@codemirror/lang-json").then((m) => m.json()),
  commonmark: () => import("@codemirror/lang-markdown").then((m) => m.markdown({ base: m.commonmarkLanguage })),
  markdown: () => import("@codemirror/lang-markdown").then((m) => m.markdown({ base: m.markdownLanguage })),
  php: () => import("@codemirror/lang-php").then((m) => m.php()),
  python: () => import("@codemirror/lang-python").then((m) => m.python()),
  rust: () => import("@codemirror/lang-rust").then((m) => m.rust()),
  cassandra: () => import("@codemirror/lang-sql").then((m) => m.sql({ dialect: m.Cassandra })),
  msSQL: () => import("@codemirror/lang-sql").then((m) => m.sql({ dialect: m.MSSQL })),
  mariaDB: () => import("@codemirror/lang-sql").then((m) => m.sql({ dialect: m.MariaSQL })),
  mySQL: () => import("@codemirror/lang-sql").then((m) => m.sql({ dialect: m.MySQL })),
  plSQL: () => import("@codemirror/lang-sql").then((m) => m.sql({ dialect: m.PLSQL })),
  pgSQL: () => import("@codemirror/lang-sql").then((m) => m.sql({ dialect: m.PostgreSQL })),
  sqlite: () => import("@codemirror/lang-sql").then((m) => m.sql({ dialect: m.SQLite })),
  standardSQL: () => import("@codemirror/lang-sql").then((m) => m.sql({ dialect: m.StandardSQL })),
  wast: () => import("@codemirror/lang-wast").then((m) => m.wast()),
  xml: () => import("@codemirror/lang-xml").then((m) => m.xml()),
};

const LEGACY_MODES = {
  apl: () => import("@codemirror/legacy-modes/mode/apl").then((m) => m.apl),
  asciiArmor: () => import("@codemirror/legacy-modes/mode/asciiarmor").then((m) => m.asciiArmor),
  asn1: () => import("@codemirror/legacy-modes/mode/asn1").then((m) => m.asn1({})),
  asterisk: () => import("@codemirror/legacy-modes/mode/asterisk").then((m) => m.asterisk),
  brainfuck: () => import("@codemirror/legacy-modes/mode/brainfuck").then((m) => m.brainfuck),
  c: () => import("@codemirror/legacy-modes/mode/clike").then((m) => m.c),
  cassandra: () => import("@codemirror/legacy-modes/mode/sql").then((m) => m.cassandra),
  ceylon: () => import("@codemirror/legacy-modes/mode/clike").then((m) => m.ceylon),
  clojure: () => import("@codemirror/legacy-modes/mode/clojure").then((m) => m.clojure),
  cmake: () => import("@codemirror/legacy-modes/mode/cmake").then((m) => m.cmake),
  cobol: () => import("@codemirror/legacy-modes/mode/cobol").then((m) => m.cobol),
  coffeeScript: () => import("@codemirror/legacy-modes/mode/coffeescript").then((m) => m.coffeeScript),
  commonLisp: () => import("@codemirror/legacy-modes/mode/commonlisp").then((m) => m.commonLisp),
  cpp: () => import("@codemirror/legacy-modes/mode/clike").then((m) => m.cpp),
  crystal: () => import("@codemirror/legacy-modes/mode/crystal").then((m) => m.crystal),
  csharp: () => import("@codemirror/legacy-modes/mode/clike").then((m) => m.csharp),
  css: () => import("@codemirror/legacy-modes/mode/css").then((m) => m.css),
  cypher: () => import("@codemirror/legacy-modes/mode/cypher").then((m) => m.cypher),
  cython: () => import("@codemirror/legacy-modes/mode/python").then((m) => m.cython),
  d: () => import("@codemirror/legacy-modes/mode/d").then((m) => m.d),
  dart: () => import("@codemirror/legacy-modes/mode/clike").then((m) => m.dart),
  diff: () => import("@codemirror/legacy-modes/mode/diff").then((m) => m.diff),
  dockerFile: () => import("@codemirror/legacy-modes/mode/dockerfile").then((m) => m.dockerFile),
  dtd: () => import("@codemirror/legacy-modes/mode/dtd").then((m) => m.dtd),
  dylan: () => import("@codemirror/legacy-modes/mode/dylan").then((m) => m.dylan),
  ebnf: () => import("@codemirror/legacy-modes/mode/ebnf").then((m) => m.ebnf),
  ecl: () => import("@codemirror/legacy-modes/mode/ecl").then((m) => m.ecl),
  eiffel: () => import("@codemirror/legacy-modes/mode/eiffel").then((m) => m.eiffel),
  elm: () => import("@codemirror/legacy-modes/mode/elm").then((m) => m.elm),
  erlang: () => import("@codemirror/legacy-modes/mode/erlang").then((m) => m.erlang),
  esper: () => import("@codemirror/legacy-modes/mode/sql").then((m) => m.esper),
  ez80: () => import("@codemirror/legacy-modes/mode/z80").then((m) => m.ez80),
  factor: () => import("@codemirror/legacy-modes/mode/factor").then((m) => m.factor),
  fcl: () => import("@codemirror/legacy-modes/mode/fcl").then((m) => m.fcl),
  forth: () => import("@codemirror/legacy-modes/mode/forth").then((m) => m.forth),
  fortran: () => import("@codemirror/legacy-modes/mode/fortran").then((m) => m.fortran),
  fSharp: () => import("@codemirror/legacy-modes/mode/mllike").then((m) => m.fSharp),
  gas: () => import("@codemirror/legacy-modes/mode/gas").then((m) => m.gas),
  gasArm: () => import("@codemirror/legacy-modes/mode/gas").then((m) => m.gasArm),
  gherkin: () => import("@codemirror/legacy-modes/mode/gherkin").then((m) => m.gherkin),
  go: () => import("@codemirror/legacy-modes/mode/go").then((m) => m.go),
  gpSQL: () => import("@codemirror/legacy-modes/mode/sql").then((m) => m.gpSQL),
  gql: () => import("@codemirror/legacy-modes/mode/sql").then((m) => m.gql),
  groovy: () => import("@codemirror/legacy-modes/mode/groovy").then((m) => m.groovy),
  gss: () => import("@codemirror/legacy-modes/mode/css").then((m) => m.gss),
  haskell: () => import("@codemirror/legacy-modes/mode/haskell").then((m) => m.haskell),
  haxe: () => import("@codemirror/legacy-modes/mode/haxe").then((m) => m.haxe),
  hive: () => import("@codemirror/legacy-modes/mode/sql").then((m) => m.hive),
  html: () => import("@codemirror/legacy-modes/mode/xml").then((m) => m.html),
  http: () => import("@codemirror/legacy-modes/mode/http").then((m) => m.http),
  hxml: () => import("@codemirror/legacy-modes/mode/haxe").then((m) => m.hxml),
  idl: () => import("@codemirror/legacy-modes/mode/idl").then((m) => m.idl),
  java: () => import("@codemirror/legacy-modes/mode/clike").then((m) => m.java),
  javascript: () => import("@codemirror/legacy-modes/mode/javascript").then((m) => m.javascript),
  jinja2: () => import("@codemirror/legacy-modes/mode/jinja2").then((m) => m.jinja2),
  json: () => import("@codemirror/legacy-modes/mode/javascript").then((m) => m.json),
  jsonld: () => import("@codemirror/legacy-modes/mode/javascript").then((m) => m.jsonld),
  julia: () => import("@codemirror/legacy-modes/mode/julia").then((m) => m.julia),
  kotlin: () => import("@codemirror/legacy-modes/mode/clike").then((m) => m.kotlin),
  less: () => import("@codemirror/legacy-modes/mode/css").then((m) => m.less),
  liveScript: () => import("@codemirror/legacy-modes/mode/livescript").then((m) => m.liveScript),
  lua: () => import("@codemirror/legacy-modes/mode/lua").then((m) => m.lua),
  mariaDB: () => import("@codemirror/legacy-modes/mode/sql").then((m) => m.mariaDB),
  mathematica: () => import("@codemirror/legacy-modes/mode/mathematica").then((m) => m.mathematica),
  mbox: () => import("@codemirror/legacy-modes/mode/mbox").then((m) => m.mbox),
  mirc: () => import("@codemirror/legacy-modes/mode/mirc").then((m) => m.mirc),
  modelica: () => import("@codemirror/legacy-modes/mode/modelica").then((m) => m.modelica),
  mscgen: () => import("@codemirror/legacy-modes/mode/mscgen").then((m) => m.mscgen),
  msgenny: () => import("@codemirror/legacy-modes/mode/mscgen").then((m) => m.msgenny),
  msSQL: () => import("@codemirror/legacy-modes/mode/sql").then((m) => m.msSQL),
  mumps: () => import("@codemirror/legacy-modes/mode/mumps").then((m) => m.mumps),
  mySQL: () => import("@codemirror/legacy-modes/mode/sql").then((m) => m.mySQL),
  nesC: () => import("@codemirror/legacy-modes/mode/clike").then((m) => m.nesC),
  nginx: () => import("@codemirror/legacy-modes/mode/nginx").then((m) => m.nginx),
  nsis: () => import("@codemirror/legacy-modes/mode/nsis").then((m) => m.nsis),
  ntriples: () => import("@codemirror/legacy-modes/mode/ntriples").then((m) => m.ntriples),
  objectiveC: () => import("@codemirror/legacy-modes/mode/clike").then((m) => m.objectiveC),
  objectiveCpp: () => import("@codemirror/legacy-modes/mode/clike").then((m) => m.objectiveCpp),
  oCaml: () => import("@codemirror/legacy-modes/mode/mllike").then((m) => m.oCaml),
  octave: () => import("@codemirror/legacy-modes/mode/octave").then((m) => m.octave),
  oz: () => import("@codemirror/legacy-modes/mode/oz").then((m) => m.oz),
  pascal: () => import("@codemirror/legacy-modes/mode/pascal").then((m) => m.pascal),
  pegjs: () => import("@codemirror/legacy-modes/mode/pegjs").then((m) => m.pegjs),
  perl: () => import("@codemirror/legacy-modes/mode/perl").then((m) => m.perl),
  pgSQL: () => import("@codemirror/legacy-modes/mode/sql").then((m) => m.pgSQL),
  pig: () => import("@codemirror/legacy-modes/mode/pig").then((m) => m.pig),
  plSQL: () => import("@codemirror/legacy-modes/mode/sql").then((m) => m.plSQL),
  powerShell: () => import("@codemirror/legacy-modes/mode/powershell").then((m) => m.powerShell),
  properties: () => import("@codemirror/legacy-modes/mode/properties").then((m) => m.properties),
  protobuf: () => import("@codemirror/legacy-modes/mode/protobuf").then((m) => m.protobuf),
  puppet: () => import("@codemirror/legacy-modes/mode/puppet").then((m) => m.puppet),
  python: () => import("@codemirror/legacy-modes/mode/python").then((m) => m.python),
  q: () => import("@codemirror/legacy-modes/mode/q").then((m) => m.q),
  r: () => import("@codemirror/legacy-modes/mode/r").then((m) => m.r),
  rpmChanges: () => import("@codemirror/legacy-modes/mode/rpm").then((m) => m.rpmChanges),
  rpmSpec: () => import("@codemirror/legacy-modes/mode/rpm").then((m) => m.rpmSpec),
  ruby: () => import("@codemirror/legacy-modes/mode/ruby").then((m) => m.ruby),
  rust: () => import("@codemirror/legacy-modes/mode/rust").then((m) => m.rust),
  sas: () => import("@codemirror/legacy-modes/mode/sas").then((m) => m.sas),
  sass: () => import("@codemirror/legacy-modes/mode/sass").then((m) => m.sass),
  scala: () => import("@codemirror/legacy-modes/mode/clike").then((m) => m.scala),
  scheme: () => import("@codemirror/legacy-modes/mode/scheme").then((m) => m.scheme),
  sCSS: () => import("@codemirror/legacy-modes/mode/css").then((m) => m.sCSS),
  shader: () => import("@codemirror/legacy-modes/mode/clike").then((m) => m.shader),
  shell: () => import("@codemirror/legacy-modes/mode/shell").then((m) => m.shell),
  sieve: () => import("@codemirror/legacy-modes/mode/sieve").then((m) => m.sieve),
  smalltalk: () => import("@codemirror/legacy-modes/mode/smalltalk").then((m) => m.smalltalk),
  sml: () => import("@codemirror/legacy-modes/mode/mllike").then((m) => m.sml),
  solr: () => import("@codemirror/legacy-modes/mode/solr").then((m) => m.solr),
  sparkSQL: () => import("@codemirror/legacy-modes/mode/sql").then((m) => m.sparkSQL),
  sparql: () => import("@codemirror/legacy-modes/mode/sparql").then((m) => m.sparql),
  spreadsheet: () => import("@codemirror/legacy-modes/mode/spreadsheet").then((m) => m.spreadsheet),
  sqlite: () => import("@codemirror/legacy-modes/mode/sql").then((m) => m.sqlite),
  squirrel: () => import("@codemirror/legacy-modes/mode/clike").then((m) => m.squirrel),
  standardSQL: () => import("@codemirror/legacy-modes/mode/sql").then((m) => m.standardSQL),
  stex: () => import("@codemirror/legacy-modes/mode/stex").then((m) => m.stex),
  stexMath: () => import("@codemirror/legacy-modes/mode/stex").then((m) => m.stexMath),
  stylus: () => import("@codemirror/legacy-modes/mode/stylus").then((m) => m.stylus),
  swift: () => import("@codemirror/legacy-modes/mode/swift").then((m) => m.swift),
  tcl: () => import("@codemirror/legacy-modes/mode/tcl").then((m) => m.tcl),
  textile: () => import("@codemirror/legacy-modes/mode/textile").then((m) => m.textile),
  tiddlyWiki: () => import("@codemirror/legacy-modes/mode/tiddlywiki").then((m) => m.tiddlyWiki),
  tiki: () => import("@codemirror/legacy-modes/mode/tiki").then((m) => m.tiki),
  tlv: () => import("@codemirror/legacy-modes/mode/verilog").then((m) => m.tlv),
  toml: () => import("@codemirror/legacy-modes/mode/toml").then((m) => m.toml),
  troff: () => import("@codemirror/legacy-modes/mode/troff").then((m) => m.troff),
  ttcn: () => import("@codemirror/legacy-modes/mode/ttcn").then((m) => m.ttcn),
  ttcnCfg: () => import("@codemirror/legacy-modes/mode/ttcn-cfg").then((m) => m.ttcnCfg),
  turtle: () => import("@codemirror/legacy-modes/mode/turtle").then((m) => m.turtle),
  typescript: () => import("@codemirror/legacy-modes/mode/javascript").then((m) => m.typescript),
  vb: () => import("@codemirror/legacy-modes/mode/vb").then((m) => m.vb),
  vbScript: () => import("@codemirror/legacy-modes/mode/vbscript").then((m) => m.vbScript),
  vbScriptASP: () => import("@codemirror/legacy-modes/mode/vbscript").then((m) => m.vbScriptASP),
  velocity: () => import("@codemirror/legacy-modes/mode/velocity").then((m) => m.velocity),
  verilog: () => import("@codemirror/legacy-modes/mode/verilog").then((m) => m.verilog),
  vhdl: () => import("@codemirror/legacy-modes/mode/vhdl").then((m) => m.vhdl),
  wast: () => import("@codemirror/legacy-modes/mode/wast").then((m) => m.wast),
  webIDL: () => import("@codemirror/legacy-modes/mode/webidl").then((m) => m.webIDL),
  xml: () => import("@codemirror/legacy-modes/mode/xml").then((m) => m.xml),
  xQuery: () => import("@codemirror/legacy-modes/mode/xquery").then((m) => m.xQuery),
  xu: () => import("@codemirror/legacy-modes/mode/mscgen").then((m) => m.xu),
  yacas: () => import("@codemirror/legacy-modes/mode/yacas").then((m) => m.yacas),
  yaml: () => import("@codemirror/legacy-modes/mode/yaml").then((m) => m.yaml),
  z80: () => import("@codemirror/legacy-modes/mode/z80").then((m) => m.z80),
};

export type LanguageSupportMode = keyof typeof MODERN_MODES | keyof typeof LEGACY_MODES;

export async function fetchLanguageSupport(mode: LanguageSupportMode): Promise<LanguageSupport> {
  if (mode in MODERN_MODES) {
    return MODERN_MODES[mode as keyof typeof MODERN_MODES]();
  } else {
    const parser = await LEGACY_MODES[mode as keyof typeof LEGACY_MODES]();
    return new LanguageSupport(StreamLanguage.define(parser));
  }
}
